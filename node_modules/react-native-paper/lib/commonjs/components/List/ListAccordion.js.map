{"version":3,"names":["ListAccordion","left","right","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expanded","expandedProp","accessibilityLabel","setExpanded","React","useState","handlePressAction","e","undefined","expandedInternal","groupContext","useContext","ListAccordionGroupContext","Error","isExpanded","expandedId","titleColor","descriptionColor","titleTextColor","rippleColor","getAccordionColors","handlePress","onAccordionPress","backgroundColor","colors","background","styles","container","row","color","primary","item","content","multiline","isV3","I18nManager","getConstants","isRTL","Children","map","child","isValidElement","props","cloneElement","displayName","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex","withInternalTheme"],"sources":["ListAccordion.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\nimport { getAccordionColors } from './utils';\n\nexport type Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the TouchableRipple. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n  accessibilityLabel,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = (e: GestureResponderEvent) => {\n    onPress?.(e);\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n\n  const { titleColor, descriptionColor, titleTextColor, rippleColor } =\n    getAccordionColors({\n      theme,\n      isExpanded,\n    });\n\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <View style={{ backgroundColor: theme?.colors?.background }}>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          rippleColor={rippleColor}\n          accessibilityRole=\"button\"\n          accessibilityState={{ expanded: isExpanded }}\n          accessibilityLabel={accessibilityLabel}\n          testID={testID}\n          borderless\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: isExpanded ? theme.colors?.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                selectable={false}\n                numberOfLines={titleNumberOfLines}\n                style={[\n                  styles.title,\n                  {\n                    color: titleTextColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description ? (\n                <Text\n                  selectable={false}\n                  numberOfLines={descriptionNumberOfLines}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              ) : null}\n            </View>\n            <View\n              style={[styles.item, description ? styles.multiline : undefined]}\n            >\n              {right ? (\n                right({\n                  isExpanded: isExpanded,\n                })\n              ) : (\n                <MaterialCommunityIcon\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                  color={theme.isV3 ? descriptionColor : titleColor}\n                  size={24}\n                  direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n                />\n              )}\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child as React.ReactElement<any>, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withInternalTheme(ListAccordion);\n"],"mappings":"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"}