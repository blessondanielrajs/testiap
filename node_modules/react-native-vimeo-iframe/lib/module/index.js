function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useRef } from 'react';
import { WebView } from 'react-native-webview';
import template from './template';
import { PlayerEvents } from './types';
export const Vimeo = ({
  handlers: handlersArr,
  videoId,
  params,
  reference,
  ...otherProps
}) => {
  const webRef = useRef();
  const url = params ? `https://player.vimeo.com/video/${videoId}?${params}` : `https://player.vimeo.com/video/${videoId}`;
  const handlers = {};
  const registerHandlers = useCallback(() => {
    PlayerEvents.forEach(name => {
      if (handlersArr) handlers[name] = handlersArr[name];
    });
  }, [handlers, handlersArr]);
  registerHandlers();
  const onBridgeMessage = useCallback(event => {
    const payload = JSON.parse(event.nativeEvent.data);
    let bridgeMessageHandler = handlers[payload === null || payload === void 0 ? void 0 : payload.name];
    if (bridgeMessageHandler) bridgeMessageHandler(payload === null || payload === void 0 ? void 0 : payload.data);
  }, [handlers]);
  return /*#__PURE__*/React.createElement(WebView, _extends({
    allowsFullscreenVideo: true,
    source: {
      uri: url,
      headers: {
        Referer: reference
      }
    },
    javaScriptEnabled: true,
    ref: webRef,
    onMessage: onBridgeMessage,
    scrollEnabled: false,
    onNavigationStateChange: a => console.log(a === null || a === void 0 ? void 0 : a.url),
    injectedJavaScript: template(url)
  }, otherProps));
};
//# sourceMappingURL=index.js.map