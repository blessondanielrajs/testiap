"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vimeo = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNativeWebview = require("react-native-webview");

var _template = _interopRequireDefault(require("./template"));

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Vimeo = ({
  handlers: handlersArr,
  videoId,
  params,
  reference,
  ...otherProps
}) => {
  const webRef = (0, _react.useRef)();
  const url = params ? `https://player.vimeo.com/video/${videoId}?${params}` : `https://player.vimeo.com/video/${videoId}`;
  const handlers = {};
  const registerHandlers = (0, _react.useCallback)(() => {
    _types.PlayerEvents.forEach(name => {
      if (handlersArr) handlers[name] = handlersArr[name];
    });
  }, [handlers, handlersArr]);
  registerHandlers();
  const onBridgeMessage = (0, _react.useCallback)(event => {
    const payload = JSON.parse(event.nativeEvent.data);
    let bridgeMessageHandler = handlers[payload === null || payload === void 0 ? void 0 : payload.name];
    if (bridgeMessageHandler) bridgeMessageHandler(payload === null || payload === void 0 ? void 0 : payload.data);
  }, [handlers]);
  return /*#__PURE__*/_react.default.createElement(_reactNativeWebview.WebView, _extends({
    allowsFullscreenVideo: true,
    source: {
      uri: url,
      headers: {
        Referer: reference
      }
    },
    javaScriptEnabled: true,
    ref: webRef,
    onMessage: onBridgeMessage,
    scrollEnabled: false,
    onNavigationStateChange: a => console.log(a === null || a === void 0 ? void 0 : a.url),
    injectedJavaScript: (0, _template.default)(url)
  }, otherProps));
};

exports.Vimeo = Vimeo;
//# sourceMappingURL=index.js.map