{"version":3,"names":["StripeSdk","NativeModules"],"sources":["NativeStripeSdk.tsx"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport type {\n  PaymentMethod,\n  PaymentIntent,\n  ApplePay,\n  PlatformPay,\n  PaymentSheet,\n  SetupIntent,\n  InitialiseParams,\n  CreatePaymentMethodResult,\n  RetrievePaymentIntentResult,\n  RetrieveSetupIntentResult,\n  ConfirmPaymentResult,\n  HandleNextActionResult,\n  ConfirmSetupIntentResult,\n  CreateTokenForCVCUpdateResult,\n  InitPaymentSheetResult,\n  PresentPaymentSheetResult,\n  ConfirmPaymentSheetPaymentResult,\n  ApplePayResult,\n  CreateTokenResult,\n  GooglePayInitResult,\n  PayWithGooglePayResult,\n  CreateGooglePayPaymentMethodResult,\n  GooglePay,\n  OpenApplePaySetupResult,\n  Token,\n  VerifyMicrodepositsParams,\n  IsCardInWalletResult,\n  CanAddCardToWalletParams,\n  CanAddCardToWalletResult,\n  FinancialConnections,\n} from './types';\n\ntype NativeStripeSdkType = {\n  initialise(params: InitialiseParams): Promise<void>;\n  createPaymentMethod(\n    params: PaymentMethod.CreateParams,\n    options: PaymentMethod.CreateOptions\n  ): Promise<CreatePaymentMethodResult>;\n  handleNextAction(\n    paymentIntentClientSecret: string,\n    returnURL?: string | null\n  ): Promise<HandleNextActionResult>;\n  confirmPayment(\n    paymentIntentClientSecret: string,\n    params?: PaymentIntent.ConfirmParams,\n    options?: PaymentIntent.ConfirmOptions\n  ): Promise<ConfirmPaymentResult>;\n  isApplePaySupported(): Promise<boolean>;\n  presentApplePay(params: ApplePay.PresentParams): Promise<ApplePayResult>;\n  confirmApplePayPayment(clientSecret: string): Promise<void>;\n  updateApplePaySummaryItems(\n    summaryItems: ApplePay.CartSummaryItem[],\n    errorAddressFields: Array<{\n      field: ApplePay.AddressFields;\n      message?: string;\n    }>\n  ): Promise<void>;\n  confirmSetupIntent(\n    paymentIntentClientSecret: string,\n    params: SetupIntent.ConfirmParams,\n    options: SetupIntent.ConfirmOptions\n  ): Promise<ConfirmSetupIntentResult>;\n  retrievePaymentIntent(\n    clientSecret: string\n  ): Promise<RetrievePaymentIntentResult>;\n  retrieveSetupIntent(clientSecret: string): Promise<RetrieveSetupIntentResult>;\n  initPaymentSheet(\n    params: PaymentSheet.SetupParams\n  ): Promise<InitPaymentSheetResult>;\n  presentPaymentSheet(): Promise<PresentPaymentSheetResult>;\n  confirmPaymentSheetPayment(): Promise<ConfirmPaymentSheetPaymentResult>;\n  createTokenForCVCUpdate(cvc: string): Promise<CreateTokenForCVCUpdateResult>;\n  handleURLCallback(url: string): Promise<boolean>;\n  createToken(params: Token.CreateParams): Promise<CreateTokenResult>;\n  isGooglePaySupported(params: GooglePay.IsSupportedParams): Promise<boolean>;\n  initGooglePay(params: GooglePay.InitParams): Promise<GooglePayInitResult>;\n  presentGooglePay(\n    params: GooglePay.PresentParams\n  ): Promise<PayWithGooglePayResult>;\n  createGooglePayPaymentMethod(\n    params: GooglePay.CreatePaymentMethodParams\n  ): Promise<CreateGooglePayPaymentMethodResult>;\n  openApplePaySetup(): Promise<OpenApplePaySetupResult>;\n  verifyMicrodeposits(\n    isPaymentIntent: boolean,\n    clientSecret: string,\n    params: VerifyMicrodepositsParams\n  ): Promise<ConfirmSetupIntentResult | ConfirmPaymentResult>;\n  collectBankAccount(\n    isPaymentIntent: boolean,\n    clientSecret: string,\n    params: PaymentMethod.CollectBankAccountParams\n  ): Promise<ConfirmSetupIntentResult | ConfirmPaymentResult>;\n  getConstants(): { API_VERSIONS: { CORE: string; ISSUING: string } };\n  canAddCardToWallet(\n    params: CanAddCardToWalletParams\n  ): Promise<CanAddCardToWalletResult>;\n  isCardInWallet(params: {\n    cardLastFour: string;\n  }): Promise<IsCardInWalletResult>;\n  collectBankAccountToken(\n    clientSecret: string\n  ): Promise<FinancialConnections.TokenResult>;\n  collectFinancialConnectionsAccounts(\n    clientSecret: string\n  ): Promise<FinancialConnections.SessionResult>;\n  resetPaymentSheetCustomer(): Promise<null>;\n  isPlatformPaySupported(params: {\n    googlePay?: GooglePay.IsSupportedParams;\n  }): Promise<boolean>;\n  createPlatformPayPaymentMethod(\n    params: PlatformPay.PaymentMethodParams\n  ): Promise<PlatformPay.PaymentMethodResult>;\n  dismissPlatformPay(): Promise<boolean>;\n  updatePlatformPaySheet(\n    summaryItems: Array<ApplePay.CartSummaryItem>,\n    shippingMethods: Array<ApplePay.ShippingMethod>,\n    errors: Array<PlatformPay.ApplePaySheetError>\n  ): Promise<void>;\n  confirmPlatformPay(\n    clientSecret: string,\n    params: PlatformPay.ConfirmParams,\n    isPaymentIntent: boolean\n  ): Promise<\n    PlatformPay.ConfirmPaymentResult | PlatformPay.ConfirmSetupIntentResult\n  >;\n};\n\nconst { StripeSdk } = NativeModules;\n\nexport default StripeSdk as NativeStripeSdkType;\n"],"mappings":"gFAAA,yCAkIA,GAAQA,UAAS,CAAKC,0BAAa,CAA3BD,SAAS,CAAmB,aAErBA,SAAS"}