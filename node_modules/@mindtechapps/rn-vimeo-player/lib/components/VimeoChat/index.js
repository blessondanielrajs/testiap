"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VimeoChat = void 0;
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_webview_1 = require("react-native-webview");
const Loader_1 = __importDefault(require("../Loader"));
const styles_1 = __importDefault(require("./styles"));
/**
 * Vimeo chat.
 * @param chatUrl - The chat url.
 * @param customLoader - Use custom loader instead of the default.
 * @param loaderColor - Use custom loader color instead of the default.
 * @param onReady - A function what will be called when the chat is ready.
 * @param onError - A function what will be called when the chat has an error.
 * @param style - The chat's custom style.
 */
const VimeoChat = (props) => {
    const { chatUrl, customLoader, loaderColor, style, onReady, onError } = props;
    const injectedScript = `
    const meta = document.createElement('meta');
    meta.setAttribute('content', 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=1');
    meta.setAttribute('name', 'viewport');
    document.getElementsByTagName('head')[0].appendChild(meta);
    true;
  `;
    return (<react_native_1.View style={styles_1.default.container}>
      <react_native_webview_1.WebView source={{ uri: chatUrl }} style={style} injectedJavaScript={injectedScript} javaScriptEnabledAndroid automaticallyAdjustContentInsets allowsBackForwardNavigationGestures startInLoadingState contentInsetAdjustmentBehavior="automatic" setSupportMultipleWindows={false} renderLoading={() => <Loader_1.default customLoader={customLoader} loaderColor={loaderColor}/>} onLoadEnd={() => onReady && onReady()} onError={(syntheticEvent) => {
        const { nativeEvent } = syntheticEvent;
        console.warn('Vimeo Chat WebView error: ', nativeEvent);
        onError && onError();
    }} onMessage={() => { }}/>
    </react_native_1.View>);
};
exports.VimeoChat = VimeoChat;
exports.default = exports.VimeoChat;
//# sourceMappingURL=index.js.map