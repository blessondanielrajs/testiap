"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VimeoPlayer = void 0;
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const react_native_webview_1 = require("react-native-webview");
const Loader_1 = __importDefault(require("../Loader"));
const styles_1 = __importDefault(require("./styles"));
/**
 * Vimeo player.
 * @param videoUrl - The video URL.
 * @param customLoader - Use custom loader instead of the default.
 * @param loaderColor - Use custom loader color instead of the default.
 * @param backgroundColor - The component's background color.
 * @param style - The player's custom style.
 * @param onReady - A function what will be called when the player is ready.
 * @param onError - A function what will be called when the player has an error.
 */
const VimeoPlayer = (props) => {
    const { videoUrl, customLoader, loaderColor, backgroundColor, style, onReady, onError } = props;
    const containerStyle = { backgroundColor };
    const injectedScript = `
    const meta = document.createElement('meta');
    meta.setAttribute('content', 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=1');
    meta.setAttribute('name', 'viewport');
    document.getElementsByTagName('head')[0].appendChild(meta);
    document.body.style.backgroundColor = '${backgroundColor}';
    true;
  `;
    const webviewRef = react_1.default.useRef(null);
    return (<react_native_1.View style={styles_1.default.container}>
      <react_native_webview_1.WebView source={{ uri: videoUrl }} style={[containerStyle, style]} ref={webviewRef} allowsFullscreenVideo allowsInlineMediaPlayback allowsBackForwardNavigationGestures startInLoadingState injectedJavaScriptForMainFrameOnly={false} contentInsetAdjustmentBehavior="automatic" setSupportMultipleWindows={false} renderLoading={() => (<Loader_1.default customLoader={customLoader} loaderColor={loaderColor} style={containerStyle}/>)} onLoadEnd={() => {
        onReady && onReady();
        webviewRef.current?.injectJavaScript(injectedScript);
    }} onError={(syntheticEvent) => {
        const { nativeEvent } = syntheticEvent;
        console.warn('Vimeo Player WebView error: ', nativeEvent);
        onError && onError();
    }} onMessage={() => { }}/>
    </react_native_1.View>);
};
exports.VimeoPlayer = VimeoPlayer;
exports.default = exports.VimeoPlayer;
//# sourceMappingURL=index.js.map