{"version":3,"sources":["helpers.js"],"names":["abbr","name","noUpperCase","startsWith","console","warn","length","substring","toUpperCase","sumChars","str","sum","i","charCodeAt","fetchImage","src","options","fetchCall","contentTypeHeader","Platform","OS","headers","get","map","generateBackgroundStyle","bgColor","bgColors","background","backgroundColor","generateBackgroundColor","getContainerStyle","size","borderRadius","borderWidth","borderColor","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import {Platform} from 'react-native';\nimport initials from 'initials';\nimport fetch from 'node-fetch';\n\nexport const abbr = (name, noUpperCase) => {\n  let abbr = initials(name, noUpperCase);\n  if (name.startsWith('+')) {\n    abbr = `+${ abbr }`;\n  }\n  if (!abbr) {\n    console.warn('Could not get abbr from name');\n    abbr = name;\n  }\n  if (abbr.length > 2) {\n    abbr = abbr.substring(0, 2);\n  }\n  if (!noUpperCase) {\n    abbr = abbr.toUpperCase();\n  }\n  return abbr;\n};\n\nexport const sumChars = (str) => {\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum;\n};\n\nexport const fetchImage = async (src, options) => {\n  try {\n    const fetchCall = await fetch(src, options);\n    const contentTypeHeader = Platform.OS === 'web' ?\n      fetchCall.headers.get('content-type') :\n      fetchCall.headers.map['content-type'];\n    if (contentTypeHeader.startsWith('image/')) {\n      return true;\n    } else {\n      console.warn('Online fetched source is not a supported image');\n      return false;\n    }\n  } catch (err) {\n    console.warn('Error fetching source, falling back to initials', err);\n    return false;\n  }\n};\n\nexport const generateBackgroundStyle = (name, bgColor, bgColors) => {\n  let background;\n  if (bgColor) {\n    background = bgColor;\n  } else {\n    // Pick a deterministic color from the list\n    const i = sumChars(name) % bgColors.length;\n    background = bgColors[i];\n  }\n  return {backgroundColor: background};\n};\n\nexport const generateBackgroundColor = (name, bgColor, bgColors) => {\n  let background;\n  if (bgColor) {\n    background = bgColor;\n  } else {\n    // Pick a deterministic color from the list\n    const i = sumChars(name) % bgColors.length;\n    background = bgColors[i];\n  }\n  return background;\n};\n\nexport const getContainerStyle = (size, src, borderRadius) => {\n  return {\n    borderRadius: borderRadius ? borderRadius : (size * 0.5),\n    borderWidth: src ? 0 : 1,\n    borderColor: 'transparent',\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n};\n"]}