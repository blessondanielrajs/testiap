{"version":3,"sources":["index.js"],"names":["UserAvatar","props","name","src","bgColor","bgColors","textColor","size","imageStyle","style","borderRadius","component","noUpperCase","textStyle","console","warn","parseInt","inner","setInner","controller","AbortController","window","signal","then","isImage","abort","propTypes","PropTypes","string","array","number","object","any","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {View} from 'react-native';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\n\nimport {\n  TextAvatar,\n  ImageAvatar,\n  CustomAvatar,\n} from './components/'; ;\nimport {\n  fetchImage,\n  getContainerStyle,\n  generateBackgroundStyle,\n  generateBackgroundColor,\n} from './helpers';\n\nconst UserAvatar = (props) => {\n  let {\n    name,\n    src,\n    bgColor,\n    bgColors,\n    textColor,\n    size,\n    imageStyle,\n    style,\n    borderRadius,\n    component,\n    noUpperCase,\n    textStyle,\n  } = props;\n\n  // Validations\n  if (typeof (size) === 'string') {\n    console.warn('size prop should be a number');\n    size = parseInt(size);\n  }\n\n  const [inner, setInner] = useState(\n      <TextAvatar\n        textColor={textColor}\n        size={size}\n        name={name}\n        noUpperCase={noUpperCase}\n        textStyle={textStyle}\n      />);\n\n  useEffect(() => {\n    if (component) {\n      setInner(<CustomAvatar size={size} component={component} />);\n    } else if (src) {\n      const controller = new (AbortController || window.AbortController)();\n      fetchImage(src, {signal: controller.signal}).then((isImage) => {\n        if (isImage) {\n          setInner(\n              <ImageAvatar src={src} size={size} imageStyle={imageStyle} />,\n          );\n        }\n      });\n      return () => controller.abort();\n    } else {\n      setInner(<TextAvatar textColor={textColor} size={size} name={name} />);\n    }\n  }, [textColor, size, name, component, imageStyle, src]);\n\n  return (\n    <View style={[\n      generateBackgroundStyle(name, bgColor, bgColors),\n      getContainerStyle(size, src, borderRadius),\n      style]}\n    >\n      {inner}\n    </View>\n  );\n};\n\nUserAvatar.propTypes = {\n  name: PropTypes.string,\n  src: PropTypes.string,\n  bgColor: PropTypes.string,\n  bgColors: PropTypes.array,\n  textColor: PropTypes.string,\n  size: PropTypes.number,\n  imageStyle: PropTypes.object,\n  style: PropTypes.object,\n  textStyle: PropTypes.object,\n  borderRadius: PropTypes.number,\n  component: PropTypes.any,\n  noUpperCase: PropTypes.bool,\n  textStyle: PropTypes.object,\n};\n\nUserAvatar.defaultProps = {\n  size: 32,\n  textColor: '#fff',\n  name: 'John Doe',\n  bgColors: [ // from https://flatuicolors.com/\n    '#2ecc71', // emerald\n    '#3498db', // peter river\n    '#8e44ad', // wisteria\n    '#e67e22', // carrot\n    '#e74c3c', // alizarin\n    '#1abc9c', // turquoise\n    '#2c3e50', // midnight blue\n  ],\n  textStyle: {},\n};\n\nexport {generateBackgroundColor};\n\nexport default UserAvatar;\n"]}