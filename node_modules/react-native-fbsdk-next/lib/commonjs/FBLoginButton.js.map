{"version":3,"names":["LoginButton","React","Component","_eventHandler","event","nativeEvent","eventDict","type","props","onLoginFinished","error","result","onLogoutFinished","render","bind","styles","StyleSheet","create","defaultButtonStyle","height","width","defaultProps","style","RCTFBLoginButton","requireNativeComponent"],"sources":["FBLoginButton.tsx"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @format\n */\nimport {\n  DefaultAudience,\n  LoginBehaviorAndroid,\n  LoginResult,\n  LoginTracking,\n} from './FBLoginManager';\nimport {PropsOf} from './utils';\nimport * as React from 'react';\nimport {requireNativeComponent, StyleSheet, ViewStyle} from 'react-native';\n\nexport type Event = {\n  nativeEvent?: {\n    type?: 'loginFinished' | 'logoutFinished';\n    error: Record<string, unknown>;\n    result: LoginResult;\n  };\n};\nexport type TooltipBehaviorIOS = 'auto' | 'force_display' | 'disable';\n\n/**\n * A button that initiates a log in or log out flow upon tapping.\n */\nclass LoginButton extends React.Component<{\n  /**\n   * Represents the permissions to request when the login button\n   * is pressed.\n   */\n  permissions?: Array<string>;\n\n  /**\n   * The callback invoked upon error/completion of a login request.\n   */\n  onLoginFinished?: (\n    error: Record<string, unknown>,\n    result: LoginResult,\n  ) => void;\n\n  /**\n   * The callback invoked upon completion of a logout request.\n   */\n  onLogoutFinished?: () => void;\n\n  /**\n   * The behavior to use when attempting a login.\n   * @platform android\n   */\n  loginBehaviorAndroid?: LoginBehaviorAndroid;\n\n  /**\n   * The default audience to target when attempting a login.\n   */\n  defaultAudience?: DefaultAudience;\n\n  /**\n   * For iOS only, the desired tooltip behavior.\n   * @platform ios\n   */\n  tooltipBehaviorIOS?: TooltipBehaviorIOS;\n\n  /**\n   * Gets or sets an optional nonce to use for login attempts. A valid nonce must be a non-empty string without\n   * whitespace. An invalid nonce will not be set. Instead, default unique nonces will be used for login attempts.\n   * @platform ios\n   */\n  nonceIOS?: string;\n\n  /**\n   * Gets or sets the desired tracking preference to use for login attempts. Defaults to `enabled`\n   * @platform ios\n   */\n  loginTrackingIOS?: LoginTracking;\n\n  /**\n   * View style, if any.\n   */\n  style?: ViewStyle;\n\n  /**\n   * testID, if any.\n   */\n  testID?: string;\n}> {\n  static defaultProps: {\n    style: typeof styles.defaultButtonStyle;\n  };\n\n  _eventHandler(event: Event) {\n    if (typeof event !== 'object' || !event || !event.nativeEvent) {\n      return;\n    }\n    const eventDict = event.nativeEvent;\n    if (eventDict.type === 'loginFinished') {\n      if (this.props.onLoginFinished) {\n        this.props.onLoginFinished(eventDict.error, eventDict.result);\n      }\n    } else if (eventDict.type === 'logoutFinished') {\n      if (this.props.onLogoutFinished) {\n        this.props.onLogoutFinished();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <RCTFBLoginButton\n        {...this.props}\n        onChange={this._eventHandler.bind(this)}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  defaultButtonStyle: {\n    height: 30,\n    width: 190,\n  },\n});\n\nLoginButton.defaultProps = {\n  style: styles.defaultButtonStyle,\n};\n\ntype RCTFBLoginButtonProps = PropsOf<LoginButton> & {\n  onChange: (event: Event) => void;\n};\n\nconst RCTFBLoginButton =\n  requireNativeComponent<RCTFBLoginButtonProps>('RCTFBLoginButton');\n\nexport default LoginButton;\n"],"mappings":";;;;;;;AA4BA;;AACA;;;;;;;;;;AAWA;AACA;AACA;AACA,MAAMA,WAAN,SAA0BC,KAAK,CAACC,SAAhC,CA2DG;EAKDC,aAAa,CAACC,KAAD,EAAe;IAC1B,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAA9B,IAAuC,CAACA,KAAK,CAACC,WAAlD,EAA+D;MAC7D;IACD;;IACD,MAAMC,SAAS,GAAGF,KAAK,CAACC,WAAxB;;IACA,IAAIC,SAAS,CAACC,IAAV,KAAmB,eAAvB,EAAwC;MACtC,IAAI,KAAKC,KAAL,CAAWC,eAAf,EAAgC;QAC9B,KAAKD,KAAL,CAAWC,eAAX,CAA2BH,SAAS,CAACI,KAArC,EAA4CJ,SAAS,CAACK,MAAtD;MACD;IACF,CAJD,MAIO,IAAIL,SAAS,CAACC,IAAV,KAAmB,gBAAvB,EAAyC;MAC9C,IAAI,KAAKC,KAAL,CAAWI,gBAAf,EAAiC;QAC/B,KAAKJ,KAAL,CAAWI,gBAAX;MACD;IACF;EACF;;EAEDC,MAAM,GAAG;IACP,oBACE,oBAAC,gBAAD,eACM,KAAKL,KADX;MAEE,QAAQ,EAAE,KAAKL,aAAL,CAAmBW,IAAnB,CAAwB,IAAxB;IAFZ,GADF;EAMD;;AA5BA;;gBA3DGd,W;;AA0FN,MAAMe,MAAM,GAAGC,uBAAA,CAAWC,MAAX,CAAkB;EAC/BC,kBAAkB,EAAE;IAClBC,MAAM,EAAE,EADU;IAElBC,KAAK,EAAE;EAFW;AADW,CAAlB,CAAf;;AAOApB,WAAW,CAACqB,YAAZ,GAA2B;EACzBC,KAAK,EAAEP,MAAM,CAACG;AADW,CAA3B;AAQA,MAAMK,gBAAgB,GACpB,IAAAC,mCAAA,EAA8C,kBAA9C,CADF;eAGexB,W"}