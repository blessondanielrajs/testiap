{"version":3,"names":["NativeModules","NativeEventEmitter","AccessToken","FBAccessToken","eventEmitter","constructor","tokenMap","accessToken","permissions","declinedPermissions","expiredPermissions","applicationID","userID","expirationTime","lastRefreshTime","dataAccessExpirationTime","accessTokenSource","Object","freeze","getCurrentAccessToken","Promise","resolve","setCurrentAccessToken","refreshCurrentAccessTokenAsync","addListener","listener","subscription","remove","getExpires","getPermissions","getDeclinedPermissions","getExpiredPermissions","getLastRefresh","getDataAccessExpiration","getApplicationId","getUserId"],"sources":["FBAccessToken.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @format\n */\nimport {NativeModules, NativeEventEmitter} from 'react-native';\n\nconst AccessToken = NativeModules.FBAccessToken;\n\nconst eventEmitter = new NativeEventEmitter(AccessToken);\n\nexport type AccessTokenMap = {\n  accessToken: string;\n  permissions: Array<string>;\n  declinedPermissions: Array<string>;\n  expiredPermissions: Array<string>;\n  applicationID: string;\n  userID: string;\n  expirationTime: number;\n  lastRefreshTime: number;\n  dataAccessExpirationTime: number;\n  accessTokenSource?: string;\n};\n\n/**\n * Represents an immutable access token for using Facebook services.\n */\nclass FBAccessToken {\n  /**\n   * The access token string.\n   */\n  accessToken: string;\n\n  /**\n   * The known granted permissions.\n   */\n  permissions: Array<string>;\n\n  /**\n   * The known declined permissions.\n   */\n  declinedPermissions: Array<string>;\n\n  /**\n   * The known expired permissions.\n   */\n  expiredPermissions: Array<string>;\n\n  /**\n   * The app ID.\n   */\n  applicationID: string;\n\n  /**\n   * The user ID.\n   */\n  userID: string;\n\n  /**\n   * The expiration time of the access token.\n   * The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  expirationTime: number;\n\n  /**\n   * The last refresh time of the access token.\n   * The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  lastRefreshTime: number;\n\n  /**\n   * The data access expiration time of the access token.\n   * The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  dataAccessExpirationTime: number;\n\n  /**\n   * The source of access token.\n   * @platform android\n   */\n  accessTokenSource?: string;\n\n  constructor(tokenMap: AccessTokenMap) {\n    this.accessToken = tokenMap.accessToken;\n    this.permissions = tokenMap.permissions;\n    this.declinedPermissions = tokenMap.declinedPermissions;\n    this.expiredPermissions = tokenMap.expiredPermissions;\n    this.applicationID = tokenMap.applicationID;\n    this.userID = tokenMap.userID;\n    this.expirationTime = tokenMap.expirationTime;\n    this.lastRefreshTime = tokenMap.lastRefreshTime;\n    this.dataAccessExpirationTime = tokenMap.dataAccessExpirationTime;\n    this.accessTokenSource = tokenMap.accessTokenSource;\n    Object.freeze(this);\n  }\n\n  /**\n   * Getter for the access token that is current for the application.\n   */\n  static getCurrentAccessToken() {\n    return new Promise<FBAccessToken | null>((resolve) => {\n      AccessToken.getCurrentAccessToken((tokenMap?: AccessTokenMap) => {\n        if (tokenMap) {\n          resolve(new FBAccessToken(tokenMap));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n\n  /**\n   * Setter for the access token that is current for the application.\n   */\n  static setCurrentAccessToken(accessToken: AccessTokenMap) {\n    AccessToken.setCurrentAccessToken(accessToken);\n  }\n\n  /**\n   * Updates the current access token with up to date permissions,\n   * and extends the expiration date, if extension is possible.\n   */\n  static refreshCurrentAccessTokenAsync(): Promise<AccessTokenMap> {\n    return AccessToken.refreshCurrentAccessTokenAsync();\n  }\n\n  /**\n   * Adds a listener for when the access token changes. Returns a functions which removes the\n   * listener when called.\n   */\n  static addListener(listener: (accessToken: FBAccessToken | null) => void) {\n    const subscription = eventEmitter.addListener(\n      'fbsdk.accessTokenDidChange',\n      (tokenMap: AccessTokenMap) => {\n        if (tokenMap) {\n          listener(new FBAccessToken(tokenMap));\n        } else {\n          listener(null);\n        }\n      },\n    );\n    return () => subscription.remove();\n  }\n\n  /**\n   * Gets the date at which the access token expires. The value is the number of\n   * milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  getExpires() {\n    return this.expirationTime;\n  }\n\n  /**\n   * Get the list of permissions associated with this access token. Note that the most up-to-date\n   * list of permissions is maintained by Facebook, so this list may be outdated if permissions\n   * have been added or removed since the time the AccessToken object was created. See\n   * https://developers.facebook.com/docs/reference/login/#permissions for details.\n   */\n  getPermissions() {\n    return this.permissions;\n  }\n\n  /**\n   * Gets the list of permissions declined by the user with this access token. It represents the\n   * entire set of permissions that have been requested and declined. Note that the most\n   * up-to-date list of permissions is maintained by Facebook, so this list may be outdated if\n   * permissions have been granted or declined since the last time an AccessToken object was\n   * created. See https://developers.facebook.com/docs/reference/login/#permissions for details.\n   */\n  getDeclinedPermissions() {\n    return this.declinedPermissions;\n  }\n\n  getExpiredPermissions() {\n    return this.expiredPermissions;\n  }\n\n  /**\n   * Gets the date at which the token was last refreshed. Since tokens expire, the Facebook SDK\n   * will attempt to renew them periodically. The value is the number of milliseconds since\n   * Jan. 1, 1970, midnight GMT.\n   */\n  getLastRefresh() {\n    return this.lastRefreshTime;\n  }\n\n  getDataAccessExpiration() {\n    return this.dataAccessExpirationTime;\n  }\n\n  /**\n   * Gets the ID of the Facebook Application associated with this access token.\n   */\n  getApplicationId() {\n    return this.applicationID;\n  }\n\n  /**\n   * Gets user ID associated with this access token.\n   */\n  getUserId() {\n    return this.userID;\n  }\n}\n\nexport default FBAccessToken;\n"],"mappings":"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"}