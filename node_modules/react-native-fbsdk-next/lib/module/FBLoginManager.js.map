{"version":3,"names":["NativeModules","Platform","LoginManager","FBLoginManager","logInWithPermissions","permissions","loginTrackingIOS","nonceIOS","OS","getLoginBehavior","Promise","resolve","setLoginBehavior","loginBehavior","getDefaultAudience","setDefaultAudience","defaultAudience","reauthorizeDataAccess","logOut"],"sources":["FBLoginManager.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @format\n */\nimport {RNFBSDKCallback} from './models/FBSDKCallback';\nimport {NativeModules, Platform} from 'react-native';\n\nconst LoginManager = NativeModules.FBLoginManager;\n/**\n * Indicates which default audience to use for sessions that post data to Facebook.\n */\nexport type DefaultAudience =\n  // Indicates that the user's friends are able to see posts made by the application.\n  | 'friends'\n  // Indicates that all Facebook users are able to see posts made by the application.\n  | 'everyone'\n  // Indicates that only the user is able to see posts made by the application.\n  | 'only_me';\nexport type LoginBehavior = LoginBehaviorIOS | LoginBehaviorAndroid;\n/**\n * Indicate how Facebook Login should be attempted on Android.\n */\nexport type LoginBehaviorAndroid =\n  // Attempt login in using the Facebook App, and if that does not work fall back to web dialog auth.\n  | 'native_with_fallback'\n  // Only attempt to login using the Facebook App.\n  | 'native_only'\n  // Only the web dialog auth should be used.\n  | 'web_only';\n/**\n * Indicate how Facebook Login should be attempted on iOS.\n */\nexport type LoginBehaviorIOS =\n  // Attempts log in through the Safari browser.\n  // This is the only behavior supported by the native sdk.\n  'browser';\n/**\n * Shows the results of a login operation.\n */\nexport type LoginResult = RNFBSDKCallback & {\n  grantedPermissions?: Array<string>;\n  declinedPermissions?: Array<string>;\n};\n\nexport type LoginTracking = 'enabled' | 'limited';\n\nexport default {\n  /**\n   * Log in with the requested permissions.\n   * @param loginTrackingIOS IOS only: loginTracking: 'enabled' | 'limited', default 'enabled'.\n   * @param nonceIOS IOS only: Nonce that the configuration was created with. A unique nonce will be used if none is provided to the factory method.\n   */\n  logInWithPermissions(\n    permissions: Array<string>,\n    loginTrackingIOS?: LoginTracking,\n    nonceIOS?: string,\n  ): Promise<LoginResult> {\n    if (Platform.OS === 'ios') {\n      return LoginManager.logInWithPermissions(\n        permissions,\n        loginTrackingIOS,\n        nonceIOS,\n      );\n    }\n    return LoginManager.logInWithPermissions(permissions);\n  },\n\n  /**\n   * Getter for the login behavior.\n   */\n  getLoginBehavior(): Promise<LoginBehavior> {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve('browser');\n    } else {\n      return LoginManager.getLoginBehavior();\n    }\n  },\n\n  /**\n   * Setter for the login behavior.\n   */\n  setLoginBehavior(loginBehavior: LoginBehavior) {\n    if (Platform.OS === 'ios') {\n      return;\n    }\n    LoginManager.setLoginBehavior(loginBehavior);\n  },\n\n  /**\n   * Getter for the default audience.\n   */\n  getDefaultAudience(): Promise<DefaultAudience> {\n    return LoginManager.getDefaultAudience();\n  },\n\n  /**\n   * Setter for the default audience.\n   */\n  setDefaultAudience(defaultAudience: DefaultAudience) {\n    LoginManager.setDefaultAudience(defaultAudience);\n  },\n\n  /**\n   * Re-authorizes the user to update data access permissions.\n   */\n  reauthorizeDataAccess(): Promise<LoginResult> {\n    return LoginManager.reauthorizeDataAccess();\n  },\n\n  /**\n   * Logs out the user.\n   */\n  logOut() {\n    LoginManager.logOut();\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,EAAuBC,QAAvB,QAAsC,cAAtC;AAEA,MAAMC,YAAY,GAAGF,aAAa,CAACG,cAAnC;AACA;AACA;AACA;;AAoCA,eAAe;EACb;AACF;AACA;AACA;AACA;EACEC,oBAAoB,CAClBC,WADkB,EAElBC,gBAFkB,EAGlBC,QAHkB,EAII;IACtB,IAAIN,QAAQ,CAACO,EAAT,KAAgB,KAApB,EAA2B;MACzB,OAAON,YAAY,CAACE,oBAAb,CACLC,WADK,EAELC,gBAFK,EAGLC,QAHK,CAAP;IAKD;;IACD,OAAOL,YAAY,CAACE,oBAAb,CAAkCC,WAAlC,CAAP;EACD,CAnBY;;EAqBb;AACF;AACA;EACEI,gBAAgB,GAA2B;IACzC,IAAIR,QAAQ,CAACO,EAAT,KAAgB,KAApB,EAA2B;MACzB,OAAOE,OAAO,CAACC,OAAR,CAAgB,SAAhB,CAAP;IACD,CAFD,MAEO;MACL,OAAOT,YAAY,CAACO,gBAAb,EAAP;IACD;EACF,CA9BY;;EAgCb;AACF;AACA;EACEG,gBAAgB,CAACC,aAAD,EAA+B;IAC7C,IAAIZ,QAAQ,CAACO,EAAT,KAAgB,KAApB,EAA2B;MACzB;IACD;;IACDN,YAAY,CAACU,gBAAb,CAA8BC,aAA9B;EACD,CAxCY;;EA0Cb;AACF;AACA;EACEC,kBAAkB,GAA6B;IAC7C,OAAOZ,YAAY,CAACY,kBAAb,EAAP;EACD,CA/CY;;EAiDb;AACF;AACA;EACEC,kBAAkB,CAACC,eAAD,EAAmC;IACnDd,YAAY,CAACa,kBAAb,CAAgCC,eAAhC;EACD,CAtDY;;EAwDb;AACF;AACA;EACEC,qBAAqB,GAAyB;IAC5C,OAAOf,YAAY,CAACe,qBAAb,EAAP;EACD,CA7DY;;EA+Db;AACF;AACA;EACEC,MAAM,GAAG;IACPhB,YAAY,CAACgB,MAAb;EACD;;AApEY,CAAf"}